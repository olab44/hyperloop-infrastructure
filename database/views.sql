-- Materialized View Option

CREATE OR REPLACE VIEW viewRouteIE AS
SELECT DISTINCT
    r.ROUTE_ID,
    r.NAME,
    ie.ELEMENT_ID,
    ie.SELECTOR,
    ie.STATUS
FROM
    ROUTE r
JOIN
    ROUTE_STRETCH rs ON r.ROUTE_ID = rs.ROUTE_ID
JOIN
    STRETCH s ON rs.STRETCH_ID = s.STRETCH_ID
LEFT JOIN
    INFRASTRUCTURE_ELEMENT ie ON s.STRETCH_ID = ie.STRETCH_FK;

CREATE TABLE IF NOT EXISTS `RouteIE` (
    ROUTE_ID INT NOT NULL,
    NAME VARCHAR(20) NOT NULL,
    ELEMENT_ID INT,
    SELECTOR VARCHAR(15),
    STATUS VARCHAR(1),
    PRIMARY KEY (ROUTE_ID, ELEMENT_ID)
);

INSERT INTO `RouteIE` (ROUTE_ID, NAME, ELEMENT_ID, SELECTOR, STATUS)
SELECT ROUTE_ID, NAME, ELEMENT_ID, SELECTOR, STATUS FROM viewRouteIE;

DELIMITER //

CREATE TRIGGER trg_r_insert AFTER INSERT ON `ROUTE`
FOR EACH ROW
BEGIN
    INSERT INTO `RouteIE` (ROUTE_ID, NAME, ELEMENT_ID, SELECTOR, STATUS)
    SELECT ROUTE_ID, NAME, ELEMENT_ID, SELECTOR, STATUS FROM viewRouteIE vrie
    WHERE vrie.ROUTE_ID = NEW.ROUTE_ID;
END //
CREATE TRIGGER trg_r_update AFTER UPDATE ON `ROUTE`
FOR EACH ROW
BEGIN
    DELETE FROM `RouteIE`;
    INSERT INTO `RouteIE` (ROUTE_ID, NAME, ELEMENT_ID, SELECTOR, STATUS)
    SELECT ROUTE_ID, NAME, ELEMENT_ID, SELECTOR, STATUS FROM viewRouteIE;
END //
CREATE TRIGGER trg_r_delete AFTER DELETE ON `ROUTE`
FOR EACH ROW
BEGIN
    DELETE FROM `RouteIE` rie WHERE rie.ROUTE_ID = OLD.ROUTE_ID;
END //

CREATE TRIGGER trg_rs_insert AFTER INSERT ON `ROUTE_STRETCH`
FOR EACH ROW
BEGIN
    DELETE FROM `RouteIE`;
    INSERT INTO `RouteIE` (ROUTE_ID, NAME, ELEMENT_ID, SELECTOR, STATUS)
    SELECT ROUTE_ID, NAME, ELEMENT_ID, SELECTOR, STATUS FROM viewRouteIE;
END //

CREATE TRIGGER trg_rs_update AFTER UPDATE ON `ROUTE_STRETCH`
FOR EACH ROW
BEGIN
    DELETE FROM `RouteIE`;
    INSERT INTO `RouteIE` (ROUTE_ID, NAME, ELEMENT_ID, SELECTOR, STATUS)
    SELECT ROUTE_ID, NAME, ELEMENT_ID, SELECTOR, STATUS FROM viewRouteIE;
END //
CREATE TRIGGER trg_rs_delete AFTER DELETE ON `ROUTE_STRETCH`
FOR EACH ROW
BEGIN
    DELETE FROM `RouteIE`;
    INSERT INTO `RouteIE` (ROUTE_ID, NAME, ELEMENT_ID, SELECTOR, STATUS)
    SELECT ROUTE_ID, NAME, ELEMENT_ID, SELECTOR, STATUS FROM viewRouteIE;
END //

CREATE TRIGGER trg_s_insert AFTER INSERT ON `STRETCH`
FOR EACH ROW
BEGIN
    DELETE FROM `RouteIE`;
    INSERT INTO `RouteIE` (ROUTE_ID, NAME, ELEMENT_ID, SELECTOR, STATUS)
    SELECT ROUTE_ID, NAME, ELEMENT_ID, SELECTOR, STATUS FROM viewRouteIE;
END //
CREATE TRIGGER trg_s_update AFTER UPDATE ON `STRETCH`
FOR EACH ROW
BEGIN
    DELETE FROM `RouteIE`;
    INSERT INTO `RouteIE` (ROUTE_ID, NAME, ELEMENT_ID, SELECTOR, STATUS)
    SELECT ROUTE_ID, NAME, ELEMENT_ID, SELECTOR, STATUS FROM viewRouteIE;
END //
CREATE TRIGGER trg_s_delete AFTER DELETE ON `STRETCH`
FOR EACH ROW
BEGIN
    DELETE FROM `RouteIE`;
    INSERT INTO `RouteIE` (ROUTE_ID, NAME, ELEMENT_ID, SELECTOR, STATUS)
    SELECT ROUTE_ID, NAME, ELEMENT_ID, SELECTOR, STATUS FROM viewRouteIE;
END //

CREATE TRIGGER trg_ie_insert AFTER INSERT ON `INFRASTRUCTURE_ELEMENT`
FOR EACH ROW
BEGIN
    INSERT INTO `RouteIE` (ROUTE_ID, NAME, ELEMENT_ID, SELECTOR, STATUS)
    SELECT ROUTE_ID, NAME, ELEMENT_ID, SELECTOR, STATUS FROM viewRouteIE vrie
    WHERE vrie.ELEMENT_ID = NEW.ELEMENT_ID;
END //
CREATE TRIGGER trg_ie_update AFTER UPDATE ON `INFRASTRUCTURE_ELEMENT`
FOR EACH ROW
BEGIN
    DELETE FROM `RouteIE`;
    INSERT INTO `RouteIE` (ROUTE_ID, NAME, ELEMENT_ID, SELECTOR, STATUS)
    SELECT ROUTE_ID, NAME, ELEMENT_ID, SELECTOR, STATUS FROM viewRouteIE;
END //
CREATE TRIGGER trg_ie_delete AFTER DELETE ON `INFRASTRUCTURE_ELEMENT`
FOR EACH ROW
BEGIN
    DELETE FROM `RouteIE` rie WHERE rie.ELEMENT_ID = OLD.ELEMENT_ID;
END //

DELIMITER ;